from AI_Scene_Generation import SceneTopologyDiscussion
from AI_Code_Generation import NetworkCodeGenerator
import json

def sence_generate():
    # 配置你的 API 密钥、URL 和其他参数
    ZHIPU_API_KEY = ""
    ZHIPU_BASE_URL = "https://open.bigmodel.cn/api/paas/v4/"
    TASK = "设计一个智慧海洋场景拓扑图，满足智慧海洋的预期功能"
    INTRODUCE = ""
    try:
        with open("data.txt", "r") as file:
            INTRODUCE = file.read()
    except FileNotFoundError:
        print(f"Error: The file {self.file_name} was not found.")

    # 创建 SceneTopologyDiscussion 实例
    system = SceneTopologyDiscussion(api_key=ZHIPU_API_KEY, base_url = ZHIPU_BASE_URL, task = TASK, introduce = INTRODUCE)

    # 运行讨论回合
    demand_message,network_message = system.run_discussion_rounds()
    return demand_message, network_message

def code_generate(demand_message, network_message):
     # 配置 API 密钥和 URL
    DEEPSEEK_API_KEY = ""  # 在这里填入你的 OpenAI API 密钥
    DEEPSEEK__BASE_URL = "https://api.deepseek.com"  # 在这里填入 DeepSeek API 的 URL（如果有特定的 API URL）

    # 创建 NetworkCodeGenerator 实例
    generator = NetworkCodeGenerator(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK__BASE_URL)
    
    # 调用 generate_code 方法生成代码
    output_text = generator.generate_code(demand_message, network_message)
    
    # 打印生成的代码
    print(output_text)
    return output_text

if __name__ == '__main__':
    demand_message, network_message = sence_generate()
    output_text = code_generate(demand_message, network_message)
    # output_text =  ['"数据中心": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw数据中心"])],\n    value=1000,\n    properties=["Linux", "CentOS", "nginx/1.14.0"],\n    owned_string="FLAG: Access granted to 数据中心",\n    vulnerabilities=dict(\n        RemoteConnection=m.VulnerabilityInfo(\n            description="Remote connection to 远程监控与指挥中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="远程监控与指挥中心", port="SSH", credential="pw远程监控与指挥中心")]),\n            reward_string="Successfully connected to 远程监控与指挥中心",\n            cost=1.0,\n        ),\n    ),\n    agent_installed=True,\n    reimagable=False,\n),\n', '"远程监控与指挥中心": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw远程监控与指挥中心"])],\n    value=1000,\n    properties=["Windows", "RDP", "nginx/1.14.0"],\n    owned_string="FLAG: 远程监控与指挥中心已被成功接管",\n),\n', '"边缘计算节点": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: 边缘计算节点被成功控制",\n    vulnerabilities=dict(\n        ConnectTo环境监测浮标=m.VulnerabilityInfo(\n            description="连接到环境监测浮标",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="环境监测浮标", port="SSH", credential="pw环境监测浮标")]),\n            reward_string="成功连接到环境监测浮标",\n            cost=1.0,\n        ),\n        ConnectTo生物监测潜水器=m.VulnerabilityInfo(\n            description="连接到生物监测潜水器",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="生物监测潜水器", port="SSH", credential="pw生物监测潜水器")]),\n            reward_string="成功连接到生物监测潜水器",\n            cost=1.0,\n        ),\n        ConnectTo无人机=m.VulnerabilityInfo(\n            description="连接到无人机",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="无人机", port="SSH", credential="pw无人机")]),\n            reward_string="成功连接到无人机",\n            cost=1.0,\n        ),\n    ),\n),\n', '"环境监测浮标": m.NodeInfo(\n    services=[m.ListeningService("HTTP", allowedCredentials=["pw环境监测浮标"])],\n    value=1000,\n    properties=["IoT", "Linux", "Sensor"],\n    owned_string="FLAG: Environmental monitoring buoy has been compromised",\n),\n', '"生物监测潜水器": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw生物监测潜水器"])],\n    value=1000,\n    properties=["潜水器", "生物监测", "水下传感器"],\n    owned_string="FLAG: 生物监测潜水器已被成功控制",\n),\n', '"无人机": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw无人机"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: 无人机被成功控制",\n),\n', '"高频地波雷达基站": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["高频地波雷达", "Linux", "远程连接"],\n    owned_string="FLAG: 高频地波雷达基站已被控制",\n    vulnerabilities=dict(\n        RemoteConnection=m.VulnerabilityInfo(\n            description="远程连接到数据中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="成功连接到数据中心",\n            cost=1.0,\n        ),\n    ),\n),\n', '"卫星": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: Successfully connected to the satellite",\n    vulnerabilities=dict(\n        ConnectTo地面站=m.VulnerabilityInfo(\n            description="Remote connection to the ground station",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="地面站", port="SSH", credential="pw地面站")]),\n            reward_string="Successfully connected to the ground station",\n            cost=1.0,\n        ),\n    ),\n),\n', '"地面站": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw地面站"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: Successfully accessed the ground station",\n    vulnerabilities=dict(\n        ConnectTo数据中心=m.VulnerabilityInfo(\n            description="Remote connection to 数据中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="Successfully connected to 数据中心",\n            cost=1.0,\n        ),\n    ),\n),\n', '"数据采集与预处理系统": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["数据采集", "预处理"],\n    owned_string="FLAG: 数据采集与预处理系统已被攻破",\n    vulnerabilities=dict(\n        ConnectTo数据中心=m.VulnerabilityInfo(\n            description="远程连接到数据中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="成功连接到数据中心",\n            cost=1.0,\n        ),\n    ),\n),\n', '"大数据分析平台": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["大数据", "分析平台", "远程连接"],\n    owned_string="FLAG: 大数据分析平台已被攻破",\n    vulnerabilities=dict(\n        RemoteConnectionTo数据中心=m.VulnerabilityInfo(\n            description="远程连接到数据中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="成功连接到数据中心",\n            cost=1.0,\n        ),\n    ),\n),\n', '"预警与决策支持系统": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: Node owned - 预警与决策支持系统",\n    vulnerabilities=dict(\n        RemoteConnectionTo数据中心=m.VulnerabilityInfo(\n            description="Remote connection to 数据中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="Successfully connected to 数据中心 via SSH",\n            cost=1.0,\n        ),\n    ),\n),\n', '"专家咨询与诊断服务": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: Successfully accessed the expert consultation and diagnosis service",\n    vulnerabilities=dict(\n        RemoteConnectionToDataCenter=m.VulnerabilityInfo(\n            description="Remote connection to the data center",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="Successfully connected to the data center via SSH",\n            cost=1.0,\n        ),\n    ),\n),\n', '"维护与培训服务": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["Windows", "SQL Server"],\n    owned_string="FLAG: Successfully accessed the maintenance and training services",\n    vulnerabilities=dict(\n        RemoteConnectionToDataCenter=m.VulnerabilityInfo(\n            description="Remote connection to the data center",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="Successfully established a remote connection to the data center",\n            cost=1.0,\n        ),\n    ),\n),\n']
    ai_code_json_path = "../AI_Code/AI_Code.json"
    # with open(ai_code_json_path, "w") as f:
    #     json.dump(output_text, f)