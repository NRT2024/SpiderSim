
from cyberbattle.simulation import model as m
from cyberbattle.simulation.model import NodeID, NodeInfo, VulnerabilityID, VulnerabilityInfo
from typing import Dict, Iterator, cast, Tuple

default_allow_rules = [
    m.FirewallRule("RDP", m.RulePermission.ALLOW),
    m.FirewallRule("SSH", m.RulePermission.ALLOW),
    m.FirewallRule("HTTPS", m.RulePermission.ALLOW),
    m.FirewallRule("HTTP", m.RulePermission.ALLOW),
]

# Network nodes involved in the Capture the flag game
input_list = ['"数据中心": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw数据中心"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: 数据中心被攻破",\n    vulnerabilities=dict(\n        ConnectTo大数据分析平台=m.VulnerabilityInfo(\n            description="连接到大数据分析平台",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="大数据分析平台", port="SSH", credential="pw大数据分析平台")]),\n            reward_string="成功连接到大数据分析平台",\n            cost=1.0,\n        ),\n        ConnectTo智能决策支持系统=m.VulnerabilityInfo(\n            description="连接到智能决策支持系统",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="智能决策支持系统", port="SSH", credential="pw智能决策支持系统")]),\n            reward_string="成功连接到智能决策支持系统",\n            cost=1.0,\n        ),\n        ConnectTo数据存储设备=m.VulnerabilityInfo(\n            description="连接到数据存储设备",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据存储设备", port="SSH", credential="pw数据存储设备")]),\n            reward_string="成功连接到数据存储设备",\n            cost=1.0,\n        ),\n    ),\n    agent_installed=True,\n    reimagable=False,\n),\n', '"大数据分析平台": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw大数据分析平台"])],\n    value=1000,\n    properties=["Hadoop", "CentOS", "Spark"],\n    owned_string="FLAG: Access granted to Big Data Analytics Platform",\n),\n', '"智能决策支持系统": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw智能决策支持系统"])],\n    value=1000,\n    properties=["Ubuntu", "Python", "AI"],\n    owned_string="FLAG: Access granted to the Intelligent Decision Support System",\n),\n', '"数据存储设备": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw数据存储设备"])],\n    value=1000,\n    properties=["Ubuntu", "MySQL"],\n    owned_string="FLAG: Access granted to 数据存储设备",\n),\n', '"汇聚交换机": m.NodeInfo(\n    services=[m.ListeningService("SSH")],\n    value=1000,\n    properties=["Switch", "Ethernet", "VLAN"],\n    owned_string="FLAG: 汇聚交换机被成功控制",\n    vulnerabilities=dict(\n        ConnectTo环境监测浮标=m.VulnerabilityInfo(\n            description="远程连接到环境监测浮标",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="环境监测浮标", port="SSH", credential="pw环境监测浮标")]),\n            reward_string="成功连接到环境监测浮标",\n            cost=1.0,\n        ),\n        ConnectTo生物监测潜水器=m.VulnerabilityInfo(\n            description="远程连接到生物监测潜水器",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="生物监测潜水器", port="SSH", credential="pw生物监测潜水器")]),\n            reward_string="成功连接到生物监测潜水器",\n            cost=1.0,\n        ),\n        ConnectTo高频地波雷达站=m.VulnerabilityInfo(\n            description="本地连接到高频地波雷达站",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="高频地波雷达站", port="SSH", credential="pw高频地波雷达站")]),\n            reward_string="成功连接到高频地波雷达站",\n            cost=1.0,\n        ),\n        ConnectTo无人机群=m.VulnerabilityInfo(\n            description="本地连接到无人机群",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="无人机群", port="SSH", credential="pw无人机群")]),\n            reward_string="成功连接到无人机群",\n            cost=1.0,\n        ),\n        ConnectTo边缘计算节点=m.VulnerabilityInfo(\n            description="本地连接到边缘计算节点",\n            type=m.VulnerabilityType.LOCAL,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="边缘计算节点", port="SSH", credential="pw边缘计算节点")]),\n            reward_string="成功连接到边缘计算节点",\n            cost=1.0,\n        ),\n    ),\n),\n', '"环境监测浮标": m.NodeInfo(\n    services=[m.ListeningService("HTTP", allowedCredentials=["pw环境监测浮标"])],\n    value=1000,\n    properties=["IoT", "Linux", "nginx/1.14.0"],\n    owned_string="FLAG: Access granted to environmental monitoring buoy",\n),\n', '"生物监测潜水器": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw生物监测潜水器"])],\n    value=1000,\n    properties=["潜水器", "生物监测", "水下传感器"],\n    owned_string="FLAG: 生物监测潜水器已被成功控制",\n),\n', '"高频地波雷达站": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw高频地波雷达站"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: Access granted to 高频地波雷达站",\n),\n', '"无人机群": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw无人机群"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: 无人机群被成功控制",\n),\n', '"边缘计算节点": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw边缘计算节点"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: 边缘计算节点已被攻破",\n),\n', '"卫星遥感系统": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw数据中心"])],\n    value=1000,\n    properties=["卫星遥感", "Linux", "nginx/1.14.0"],\n    owned_string="FLAG: 卫星遥感系统已被控制",\n    vulnerabilities=dict(\n        RemoteConnection=m.VulnerabilityInfo(\n            description="远程连接到数据中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="成功连接到数据中心",\n            cost=1.0,\n        ),\n    ),\n),\n', '"专家咨询与培训服务": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw数据中心"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: Successfully accessed the expert consultation and training service",\n    vulnerabilities=dict(\n        RemoteConnectionToDataCenter=m.VulnerabilityInfo(\n            description="Remote connection to the data center",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="Successfully established a remote connection to the data center",\n            cost=1.0,\n        ),\n    ),\n),\n', '"预警与应急响应服务": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw数据中心"])],\n    value=1000,\n    properties=["Ubuntu", "nginx/1.10.3"],\n    owned_string="FLAG: Successfully accessed the 预警与应急响应服务 node",\n    vulnerabilities=dict(\n        RemoteConnectionTo数据中心=m.VulnerabilityInfo(\n            description="Remote connection to the 数据中心 sub_node",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="Successfully connected to the 数据中心 sub_node via SSH",\n            cost=1.0,\n        ),\n    ),\n),\n', '"远程监控与维护服务": m.NodeInfo(\n    services=[m.ListeningService("SSH", allowedCredentials=["pw数据中心"])],\n    value=1000,\n    properties=["远程监控", "维护服务"],\n    owned_string="FLAG: 远程监控与维护服务已被接管",\n    vulnerabilities=dict(\n        RemoteConnection=m.VulnerabilityInfo(\n            description="远程连接到数据中心",\n            type=m.VulnerabilityType.REMOTE,\n            outcome=m.LeakedCredentials(credentials=[m.CachedCredential(node="数据中心", port="SSH", credential="pw数据中心")]),\n            reward_string="成功远程连接到数据中心",\n            cost=1.0,\n        ),\n    ),\n),\n']






# 初始化空字典来保存结果
nodes = {}

# 循环处理每个字符串，将其合并到 combined_config 字典中
for code in input_list:
    exec(f"combined_config.update({{{code}}})", globals(), {"combined_config": nodes})

global_vulnerability_library: Dict[VulnerabilityID, VulnerabilityInfo] = dict([])

# Environment constants
ENV_IDENTIFIERS = m.infer_constants_from_nodes(cast(Iterator[Tuple[NodeID, NodeInfo]], list(nodes.items())), global_vulnerability_library)

def new_environment() -> m.Environment:
    return m.Environment(network=m.create_network(nodes), vulnerability_library=global_vulnerability_library, identifiers=ENV_IDENTIFIERS)
    